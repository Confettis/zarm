{"version":3,"sources":["webpack:///./components/drag/demo.md"],"names":[],"mappings":"2FAAA,OAAe","file":"js/45.a5ad6ffc.js","sourcesContent":["export default \"# Drag 拖拽\\n\\n\\n\\n## 基本用法\\n\\n```jsx\\nimport { Drag, Button } from 'zarm';\\n\\nclass Demo extends React.Component {\\n  currentX = 0;\\n\\n  currentY = 0;\\n\\n  state = {\\n    x: 0,\\n    y: 0,\\n    drag: false,\\n  };\\n\\n  componentDidMount() {\\n    const { width, height } = this.box.getBoundingClientRect();\\n    const { width: containerWidth, height: containerHeight } = this.container.getBoundingClientRect();\\n\\n    this.currentX = Math.round(Math.random() * (containerWidth - width));\\n    this.currentY = Math.round(Math.random() * (containerHeight - height));\\n\\n    this.setState({\\n      x: this.currentX,\\n      y: this.currentY,\\n    });\\n  }\\n\\n  onDragStart = (event, dragState) => {\\n    console.log('onDragStart', dragState);\\n\\n    this.setState({\\n      drag: true,\\n    });\\n  }\\n\\n  onDragMove = (event, dragState) => {\\n    console.log('onDragMove', dragState);\\n\\n    const { width, height } = this.box.getBoundingClientRect();\\n    const { width: containerWidth, height: containerHeight } = this.container.getBoundingClientRect();\\n\\n    let newX = this.currentX + dragState.offsetX;\\n    let newY = this.currentY + dragState.offsetY;\\n\\n    if (newX < 0) {\\n      newX = 0;\\n    }\\n    if (newX > containerWidth - width) {\\n      newX = containerWidth - width;\\n    }\\n    if (newY < 0) {\\n      newY = 0;\\n    }\\n    if (newY > containerHeight - height) {\\n      newY = containerHeight - height;\\n    }\\n\\n    this.setState({\\n      x: newX,\\n      y: newY,\\n    });\\n\\n    return true;\\n  }\\n\\n  onDragEnd = (event, dragState) => {\\n    console.log('onDragEnd', dragState);\\n\\n    const { x, y } = this.state;\\n    this.currentX = x;\\n    this.currentY = y;\\n\\n    this.setState({\\n      drag: false,\\n    });\\n  }\\n\\n  render() {\\n    const { x, y, drag } = this.state;\\n\\n    return (\\n      <div\\n        ref={(el) => { this.container = el; }}\\n        style={{\\n          height: 300,\\n          backgroundColor: '#ddd',\\n          position: 'relative'\\n        }}\\n      >\\n        <Drag\\n          onDragStart={this.onDragStart}\\n          onDragMove={this.onDragMove}\\n          onDragEnd={this.onDragEnd}\\n        >\\n          <div\\n            ref={(el) => { this.box = el; }}\\n            style={{\\n              display: 'inline-block',\\n              transform: `translate3d(${x}px, ${y}px, 0)`,\\n            }}\\n          >\\n            {\\n              drag\\n                ? <Button theme=\\\"danger\\\">Let me go!</Button>\\n                : <Button theme=\\\"primary\\\">Catch me~</Button>\\n            }\\n          </div>\\n        </Drag>\\n      </div>\\n    )\\n  }\\n}\\n\\nReactDOM.render(<Demo />, mountNode);\\n```\\n\\n\\n\\n## API\\n\\n| 属性 | 类型 | 默认值 | 说明 |\\n| :--- | :--- | :--- | :--- |\\n| onDragStart | (event?: MouseEvent \\\\| TouchEvent, dragState?: DragState) => void | - | 触摸/点击 起始时触发的事件 |\\n| onDragMove | (event?: MouseEvent \\\\| TouchEvent, dragState?: DragState) => boolean | - | 拖拽移动时触发的事件 |\\n| onDragEnd | (event?: MouseEvent \\\\| TouchEvent, dragState?: DragState) => void | - | 触摸/点击 结束时触发的事件 |\\n\\n### DragState\\n| 属性 | 类型 | 默认值 | 说明 |\\n| :--- | :--- | :--- | :--- |\\n| startTime | Date | new Date() | 起始时间 |\\n| startX | number | - | 起始点x坐标 |\\n| startY | number | - | 起始点y坐标 |\\n| offsetX | number | - | 横向偏移量 |\\n| offsetY | number | - | 纵向偏移量 |\";"],"sourceRoot":""}